// 솔루션 탐색기 -> 모든 파일 표시로 변경

// 프로젝트 우클릭 -> 속성 -> 중간 디렉터리, 출력 디렉터리 변경
// 프로젝트 우클릭 -> 속성 -> C++20

// 솔루션(sln) 파일, 프로젝트(vcxproj) 파일 notepad로 열어서 봤다.
// - 프로젝트: xml이라는 문법으로 만들어져 있다.

// 빌드(Build)
// 실행 파일을 만드는 과정
// - 전처리(Preprocess): 소스코드에 담긴 메타 정보를 처리한다
// - 컴파일(Compile): 소스코드를 머신이 읽을 수 있는 파일로 변환한다
//                     (기계어 (바이너리(0,1))로 변환, 기계어를 사람이 읽을 수 있게 변환한게 어셈블리어)
// - 링크(Link): 컴파일 단계에서 변환된 여러 Object파일을 exe로 합친다
//               (우리가 작성한 소스코드 + 가져다 쓴 코드(라이브러리) 등을 합친다)

// *.pdb
// - 디버깅을 위한 기호 정보가 들어있다.
// - 실제로 유저에게 배포할때는 포함되면 안된다.

// 컴파일러
// - 컴파일러 제조사가 표준 C++문법을 따라서 컴파일 되게 구현한 프로그램
//  - MSVC(MicroSoft Visual C, C++) Compiler
//  - gcc


// include 전처리 지시자
// (전처리 지시자는 컴파일러에게 알려주는 기능)
// include 뒤에 나오는 파일을 포함하겠다
// 포함이란 #include 부분에 대상 파일을 복사 붙혀넣기 한다

// Input Output Stream
#include <iostream>
using namespace std;

int main()
{
    // 브레이크 포인트(Break point): F5로 프로그램을 실행(디버거를 붙혀서 실행)
    // 을 하면 Break point를 만날 때 까찌 실행된다.
    // 브레이크 포인트 생성 방법
    //  - 원하는 라인 왼쪽에 마우스를 올리면 흰색 원이 생기는데, 이를 클릭
    //  - 원하는 라인에 캣럿(클릭하면 생기는 깜박이는 수직선)을 두고 F9를 눌러서 켰다 껐다

    // F10: 처음에 프로그램을 디버거를 붙혀서 켜고 첫 시작점부터 멈춰 있는다
    //      이후 F10으로 한줄씩 실행이 가능하다
    // F5: 디버거를 붙혀서 프로그램을 실행하고 Break point를 만날 때 까지 쭉 실행

    // 디버거가 활성화된 상태에서 && BreakPoint 등으로 멈춰 있는 상태에서
    // 우클릭 -> 디스어셈블리로 이동을 클릭하시면 어셈블리 코드를 확인 하실 수 있습니다.

#pragma region 01. 표준 입출력 (cout, cin)
    {
        // 변수
        // 변수타입 변수이름 = 초기값
        int a = 10;
        int b{ 0 };
        std::cout << "숫자를 입력해주세요: ";
        std::cin >> a;

        // std라는 namespace(카테고리)에 있는 cout 함수를 호출
        std::cout << "안녕하세요" << std::endl;
        std::cout << "안녕하세요 " << a << " " << 20 << std::endl;
        cout << "sss" << endl;
    }

// Ctrl+K -> (Ctrl누르고 있는 상태에서 K키는 때고) C: 선택한 라인 주석
// Ctrl+K -> (Ctrl누르고 있는 상태에서 K키는 때고) U: 선택한 라인 주석 제거
//int a = 20;
//std::cout << "안녕하세요 " << a << " " << 20 << std::endl;
#pragma endregion

#pragma region 02. 리터럴(literal)
    {
        // 리터럴은 코드에 표시한 숫자나 문자열과 같은 값 을 의미
        // 십진수
        int V{ 100 };
        // 8진수 : 0144
        int V2{ 0144 }; // 쓸일 없다
        // 16진수 : 0x64
        int V3{ 0x64 };
        // 2진수 : 0b01100100 // 쓸일 없다
        int V4{ 0b01100100 };

        // 부동소수점(floating point): 3.14f
        float F{ 3.14f };

        // 배정도 부동소수점(double): 3.14
        double D{ 3.14 };

        // 단일 문자
        char C{ 'a' };
        // 문자열 "Hello"
    }
#pragma endregion
}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
